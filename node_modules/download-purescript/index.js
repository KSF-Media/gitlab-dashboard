'use strict';

const {basename} = require('path');
const {inspect} = require('util');

const dlTgz = require('dl-tgz');
const inspectWithKind = require('inspect-with-kind');
const isPlainObj = require('is-plain-obj');
const Observable = require('zen-observable');

const supportedPlatforms = new Map([
	['linux', 'linux64'],
	['darwin', 'macos'],
	['win32', 'win64']
]);

const unsupportedPlatforms = new Map([
	['aix', 'IBM AIX'],
	['android', 'Android'],
	['freebsd', 'FreeBSD'],
	['openbsd', 'OpenBSD'],
	['sunos', 'Solaris']
]);

function isNotPurs(filePath) {
	const binName = basename(filePath);
	return binName !== 'purs' && binName !== 'purs.exe';
}

const BASE_URL = 'https://github.com/purescript/purescript/releases/download/';
const DEFAULT_VERSION = '0.12.0-rc1';

const VERSION_ERROR = `Expected \`version\` option to be a string of PureScript version, for exmaple '${DEFAULT_VERSION}'`;
const PLATFORM_ERROR = 'Expected `platform` option to be one of the Node.js platform identifiers, for exmaple `linux` and `darwin`';

function createUnsupportedPlatformError(platform) {
	const error = new Error(`${
		platform ? `Invalid platform \`${platform}\`: ` : ''
	}Prebuilt \`purs\` binary is not provided for ${unsupportedPlatforms.get(platform || process.platform)}.`);
	error.code = 'ERR_UNSUPPORTED_PLATFORM';

	return new Observable(observer => observer.error(error));
}

module.exports = function downloadPurescript(...args) {
	const argLen = args.length;

	if (argLen !== 1 && argLen !== 2) {
		return new Observable(observer => {
			observer.error(new RangeError(`Expected 1 or 2 arguments (<string>[, <Object>]), but got ${
				argLen === 0 ? 'no' : argLen
			} arguments.`));
		});
	}

	const [dir, options] = args;
	const defaultOptions = {
		ignore: isNotPurs,
		baseUrl: BASE_URL
	};

	if (argLen === 1) {
		const archiveName = supportedPlatforms.get(process.platform);

		if (!archiveName) {
			return createUnsupportedPlatformError();
		}

		return dlTgz(`v${DEFAULT_VERSION}/${archiveName}.tar.gz`, dir, defaultOptions);
	}

	if (!isPlainObj(options)) {
		return new Observable(observer => {
			observer.error(new TypeError(`Expected download-purescript option to be an object, but got ${inspect(options)}.`));
		});
	}

	if (options.followRedirect !== undefined && !options.followRedirect) {
		return new Observable(observer => {
			observer.error(new Error('`followRedirect` option cannot be disabled.'));
		});
	}

	const {platform, version} = options;

	if (version !== DEFAULT_VERSION && version !== undefined) {
		if (typeof version !== 'string') {
			return new Observable(observer => {
				observer.error(new TypeError(`${VERSION_ERROR}, but got a non-string value ${inspect(version)}.`));
			});
		}

		if (version.length === 0) {
			return new Observable(observer => {
				observer.error(new Error(`${
					VERSION_ERROR
				}, but got '' (empty string). If you want to download the default version ${
					DEFAULT_VERSION
				}, you don't need to pass any values to \`version\` option.`));
			});
		}

		if (!/^[\d.]+$/.test(version)) {
			return new Observable(observer => {
				observer.error(new Error(`${VERSION_ERROR}, but got an invalid version ${inspect(version)}.`));
			});
		}
	}

	if (platform !== undefined) {
		if (typeof platform !== 'string') {
			return new Observable(observer => {
				observer.error(new TypeError(`${PLATFORM_ERROR}, but got a non-string value ${inspect(platform)}.`));
			});
		}

		if (!supportedPlatforms.has(platform)) {
			if (!unsupportedPlatforms.has(platform)) {
				const error = new Error(`${PLATFORM_ERROR.replace(/, for exmaple.+$/, '')}, but got ${
					platform === '' ? '\'\' (empty string)' : inspect(platform)
				}. The following platform identifiers are available in Node.js: \`aix\`, \`android\`, \`darwin\`, \`freebsd\`, \`linux\`, \`openbsd\`, \`sunos\` and \`win32\`.`);
				error.code = 'ERR_UNKNOWN_PLATFORM';

				return new Observable(observer => observer.error(error));
			}

			return createUnsupportedPlatformError(options.platform);
		}
	} else if (!supportedPlatforms.has(process.platform)) {
		return createUnsupportedPlatformError();
	}

	if (options.strip !== undefined && options.strip !== 1) {
		return new Observable(observer => {
			observer.error(new Error(`\`strip\` option is unchangeable, but ${
				inspectWithKind(options.strip)
			} was provided.`));
		});
	}

	const url = `v${version || DEFAULT_VERSION}/${supportedPlatforms.get(platform || process.platform)}.tar.gz`;

	return dlTgz(url, dir, Object.assign(defaultOptions, options));
};

Object.defineProperty(module.exports, 'defaultVersion', {
	value: DEFAULT_VERSION,
	enumerable: true
});
